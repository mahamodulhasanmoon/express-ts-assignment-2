openapi: 3.0.0
info:
  title: Label-2 Assignment Documentation
  version: 1.0.0
  description: express Typescript skill assessment documentation
  termsOfService: https://example.com/terms
  contact:
    name: Mahamodul Hasan Moon
    email: mahamodulhasan.moon@gmail.com
    url: https://mahamodulhasan.me
  license:
    name: Apache License, Version 2.0
    url: https://apache.com
servers:
  - description: Development
    url: http://localhost:4000/api
  - description: Production
    url: http://localhost:6000/api
tags:
  - name: HealthChecks
    description: public Api Endpoints For check Server is Running Or not
  - name: Products
    description: public Api Endpoints for product Management
  - name: Orders
    description: public Api Endpoints for Order Management

paths:
  /health:
    get:
      description: Testing For Server Health
      tags:
        - HealthChecks
      responses:
        '200':
          description: it will Return Success Message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: ok

  /products:
    post:
      description: Create a new product
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
    get:
      description: Retrieve a list of all products
      tags:
        - Products
      responses:
        '200':
          description: Products fetched successfully!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsResponse'

  /products/{productId}:
    get:
      description: Retrieve a specific product by ID
      tags:
        - Products
      parameters:
        - name: productId
          in: path
          required: true
          example: 664b9b4d7878f552280ce600
          schema:
            type: string
      responses:
        '200':
          description: Product fetched successfully!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
    put:
      description: Update product information
      tags:
        - Products
      parameters:
        - name: productId
          in: path
          required: true
          example: 664b9b4d7878f552280ce600
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
    delete:
      description: Delete a product
      tags:
        - Products
      parameters:
        - name: productId
          in: path
          required: true
          example: '664b9b4d7878f552280ce600'
          schema:
            type: string
      responses:
        '200':
          description: Product deleted successfully!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'

  /orders:
    post:
      description: Create a new order
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
    get:
      description: Retrieve a list of all orders or orders filtered by user email
      tags:
        - Orders
      parameters:
        - name: email
          in: query
          description: User email to filter orders
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Orders fetched successfully!
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/OrdersResponse'
                  - $ref: '#/components/schemas/UserOrdersResponse'

components:
  schemas:
    Product:
      type: object
      properties:
        name:
          type: string
          example: 'Wireless Mouse'
        description:
          type: string
          example: 'Ergonomic wireless mouse with adjustable DPI settings.'
        price:
          type: number
          example: 29.99
        category:
          type: string
          example: 'Electronics'
        tags:
          type: array
          items:
            type: string
            example: 'computer'
        variants:
          type: array
          items:
            $ref: '#/components/schemas/Variant'
        inventory:
          $ref: '#/components/schemas/Inventory'
      required:
        - name
        - description
        - price
        - category
        - tags
        - variants
        - inventory

    Variant:
      type: object
      properties:
        type:
          type: string
          example: 'color'
        value:
          type: string
          example: 'Black'
      required:
        - type
        - value

    Inventory:
      type: object
      properties:
        quantity:
          type: number
          example: 150
        inStock:
          type: boolean
          example: true
      required:
        - quantity
        - inStock

    ProductResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          $ref: '#/components/schemas/Product'

    ProductsResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/Product'

    DeleteResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: 'integer'

    CreateOrderRequest:
      type: object
      properties:
        email:
          type: string
          example: "level2@programming-hero.com"
        productId:
          type: string
          example: "5fd67e890b60c903cd8544a3"
        price:
          type: number
          example: 999
        quantity:
          type: integer
          example: 1
      required:
        - email
        - productId
        - price
        - quantity

    OrderResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          $ref: '#/components/schemas/Order'

    OrdersResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/Order'

    UserOrdersResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/Order'

    Order:
      type: object
      properties:
        email:
          type: string
          example: "level2@programming-hero.com"
        productId:
          type: string
          example: "5fd67e890b60c903cd8544a3"
        price:
          type: number
          example: 999
        quantity:
          type: integer
          example: 1

  responses:
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int32
                example: 400
              error:
                type: string
                example: bad Request
              data:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: email
                    message:
                      type: string
                      example: invalid Email
